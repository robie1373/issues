Code.require_file "test_helper.exs", __DIR__

defmodule CLITest do
  use ExUnit.Case

  import Issues.CLI, only: [  parse_args: 1,
                              sort_into_ascending_order: 1,
                              convert_to_list_of_hashdicts: 1 ]

  import Issues.GithubIssues.Formatter, only: [ extract_fields: 1,
                                                format: 1 ]

# Help
  test ":help returned by option parsing with -h and --help options" do
    assert parse_args(["-h", "anything"]) == :help
    assert parse_args(["--help", "anything"]) == :help
  end

  test "three values returned if three given" do
    assert parse_args(["user", "project", "99"]) == { "user", "project", 99 }
  end

  test "count is defaulted if two values given" do
    assert parse_args(["user", "project"]) == { "user", "project", 4 }
  end

# Sort
  test "sort ascending orders the correct way" do
    result = sort_into_ascending_order(fake_created_at_list(["c", "a", "b"]))
    assert (lc issue inlist result, do: issue["created_at"]) == ["a", "b", "c"]
  end

  defp fake_created_at_list(values) do
    data = lc value inlist values, do: [{"created_at", value}, {"other_data", "xxx"}]
    convert_to_list_of_hashdicts data
  end

  # Format output
  @issue [{"comments",10},{"number",892},{"pull_request",[{"html_url","https://github.com/elixir-lang/elixir/pull/892"},{"diff_url","https://github.com/elixir-lang/elixir/pull/892.diff"},{"patch_url","https://github.com/elixir-lang/elixir/pull/892.patch"}]},{"created_at","2013-03-20T19:22:07Z"},{"state","open"},{"title","This is a long title designed to ensure that the length of the output would normally be more than 80 characters. Take that 80 column fiends!"},{"comments_url","https://api.github.com/repos/elixir-lang/elixir/issues/892/comments"},{"id",12243878},{"labels",[[{"url","https://api.github.com/repos/elixir-lang/elixir/labels/Kind%3AFeature"},{"name","Kind:Feature"},{"color","0052cc"}],[{"url","https://api.github.com/repos/elixir-lang/elixir/labels/App%3AMix"},{"name","App:Mix"},{"color","CCCCCC"}]]},{"url","https://api.github.com/repos/elixir-lang/elixir/issues/892"},{"events_url","https://api.github.com/repos/elixir-lang/elixir/issues/892/events"},{"html_url","https://github.com/elixir-lang/elixir/issues/892"},{"labels_url","https://api.github.com/repos/elixir-lang/elixir/issues/892/labels{/name}"},{"assignee",:null},{"body","* Generates an `index.html` with summary and links for all files\r\n* Enhance the formatting of the progress lines to include times\r\n* Print a summary coverage line at the end\r\n* Supports `--merge` to merge the multiple HTML files generated for the same source file into a single definitive coverage file\r\n* Supports `--lines` to track un/covered lines using `# [ ...` and `# ] ...` directives\r\n\r\nThe code isn't the most elegant it could be, but it is straight-forward and effective."},{"closed_at",:null},{"user",[{"login","orenbenkiki"},{"id",68190},{"avatar_url","https://secure.gravatar.com/avatar/a0244d51965242178089a3107701db14?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png"},{"gravatar_id","a0244d51965242178089a3107701db14"},{"url","https://api.github.com/users/orenbenkiki"},{"html_url","https://github.com/orenbenkiki"},{"followers_url","https://api.github.com/users/orenbenkiki/followers"},{"following_url","https://api.github.com/users/orenbenkiki/following{/other_user}"},{"gists_url","https://api.github.com/users/orenbenkiki/gists{/gist_id}"},{"starred_url","https://api.github.com/users/orenbenkiki/starred{/owner}{/repo}"},{"subscriptions_url","https://api.github.com/users/orenbenkiki/subscriptions"},{"organizations_url","https://api.github.com/users/orenbenkiki/orgs"},{"repos_url","https://api.github.com/users/orenbenkiki/repos"},{"events_url","https://api.github.com/users/orenbenkiki/events{/privacy}"},{"received_events_url","https://api.github.com/users/orenbenkiki/received_events"},{"type","User"}]},{"milestone",:null},{"updated_at","2013-07-01T08:32:07Z"}]
  @list_of_issues [ #HashDict<[{"comments",10},{"number",892},{"pull_request",[{"html_url","https://github.com/elixir-lang/elixir/pull/892"},{"diff_url","https://github.com/elixir-lang/elixir/pull/892.diff"},{"patch_url","https://github.com/elixir-lang/elixir/pull/892.patch"}]},{"created_at","2013-03-20T19:22:07Z"},{"state","open"},{"title","Enhanced mix test --cover"},{"comments_url","https://api.github.com/repos/elixir-lang/elixir/issues/892/comments"},{"id",12243878},{"labels",[[{"url","https://api.github.com/repos/elixir-lang/elixir/labels/Kind%3AFeature"},{"name","Kind:Feature"},{"color","0052cc"}],[{"url","https://api.github.com/repos/elixir-lang/elixir/labels/App%3AMix"},{"name","App:Mix"},{"color","CCCCCC"}]]},{"url","https://api.github.com/repos/elixir-lang/elixir/issues/892"},{"events_url","https://api.github.com/repos/elixir-lang/elixir/issues/892/events"},{"html_url","https://github.com/elixir-lang/elixir/issues/892"},{"labels_url","https://api.github.com/repos/elixir-lang/elixir/issues/892/labels{/name}"},{"assignee",:null},{"body","* Generates an `index.html` with summary and links for all files\r\n* Enhance the formatting of the progress lines to include times\r\n* Print a summary coverage line at the end\r\n* Supports `--merge` to merge the multiple HTML files generated for the same source file into a single definitive coverage file\r\n* Supports `--lines` to track un/covered lines using `# [ ...` and `# ] ...` directives\r\n\r\nThe code isn't the most elegant it could be, but it is straight-forward and effective."},{"closed_at",:null},{"user",[{"login","orenbenkiki"},{"id",68190},{"avatar_url","https://secure.gravatar.com/avatar/a0244d51965242178089a3107701db14?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png"},{"gravatar_id","a0244d51965242178089a3107701db14"},{"url","https://api.github.com/users/orenbenkiki"},{"html_url","https://github.com/orenbenkiki"},{"followers_url","https://api.github.com/users/orenbenkiki/followers"},{"following_url","https://api.github.com/users/orenbenkiki/following{/other_user}"},{"gists_url","https://api.github.com/users/orenbenkiki/gists{/gist_id}"},{"starred_url","https://api.github.com/users/orenbenkiki/starred{/owner}{/repo}"},{"subscriptions_url","https://api.github.com/users/orenbenkiki/subscriptions"},{"organizations_url","https://api.github.com/users/orenbenkiki/orgs"},{"repos_url","https://api.github.com/users/orenbenkiki/repos"},{"events_url","https://api.github.com/users/orenbenkiki/events{/privacy}"},{"received_events_url","https://api.github.com/users/orenbenkiki/received_events"},{"type","User"}]},{"milestone",:null},{"updated_at","2013-07-01T08:32:07Z"}]>,
                    #HashDict<[{"comments",7},{"number",950},{"pull_request",[{"html_url",:null},{"diff_url",:null},{"patch_url",:null}]},{"created_at","2013-04-13T04:04:47Z"},{"state","open"},{"title","Protocols consolidation for releases"},{"comments_url","https://api.github.com/repos/elixir-lang/elixir/issues/950/comments"},{"id",13148339},{"labels",[[{"url","https://api.github.com/repos/elixir-lang/elixir/labels/Kind%3AFeature"},{"name","Kind:Feature"},{"color","0052cc"}],[{"url","https://api.github.com/repos/elixir-lang/elixir/labels/App%3AElixir"},{"name","App:Elixir"},{"color","CCCCCC"}],[{"url","https://api.github.com/repos/elixir-lang/elixir/labels/Level%3AAdvanced"},{"name","Level:Advanced"},{"color","f7c6c7"}]]},{"url","https://api.github.com/repos/elixir-lang/elixir/issues/950"},{"events_url","https://api.github.com/repos/elixir-lang/elixir/issues/950/events"},{"html_url","https://github.com/elixir-lang/elixir/issues/950"},{"labels_url","https://api.github.com/repos/elixir-lang/elixir/issues/950/labels{/name}"},{"assignee",:null},{"body","Protocols main goal is to allow code extensibility. Athough we compile Elixir's built-in clauses to fast protocol dispatches, dispatching a protocol for a record goes through a slower process:\r\n\r\n1. The record name is converted to a list and it is verified it starts with Elixir-\r\n\r\n2. The generate the target implementation module by concatenating the Protocol name with the Record name\r\n\r\n3. We attempt to dispatch to the implementation module\r\n\r\n4. If the dispatch fails, we go to the fallback branch, which may be to invoke the Tuple implementation (after all, all records are Tuple), the Any implementation or raise an exception\r\n\r\nThis lookup is essential for the extension mechanism. However, in some cases, it may inflict a too big performance overhead. Based on this concern, we have received a couple proposals to improve this situation. One of those are outlined in #802, which allows us to inline implementations into the protocol. The problem with the proposal above is that it gives preference to the types known upfront, sacrificying the extensibility mechanism protocols are meant to bring in the first place!\r\n\r\nThis proposal intents to solve this problem without introducing side effects.\r\n\r\n## The release process\r\n\r\nErlang applications and projects are familar with the term \"releases\". When you bundle a release, your project is compiled and ready to be used in production. You can read more about releases on [OTP's website](http://www.erlang.org/doc/design_principles/release_structure.html).\r\n\r\nIn other words, when building a release, the software knows **all** protocols available and all of their implementations, meaning we can generate a protocol with a fast dispatch logic to all available implementations. This ensures protocol will be fast for both positives (a target exists) and negative cases (the target does not exist).\r\n\r\nIn terms of a code, the Protocol API would look like:\r\n\r\n    Protocol.consolidate(MyProtocol)\r\n\r\nThis code will look at all load paths, gather all implementations available and recompile the protocol using the fast dispatch clauses. If known up-front, the list of implementations could be given as argument:\r\n\r\n    Protocol.consolidate(MyProtocol, [Binary, List, SomeRecord])\r\n\r\nThis approach has two caveats:\r\n\r\n1. If a protocol is consolidated, code loading a new implementation for a new record to production servers won't work if a new protocol consolidation is not available\r\n\r\n2. Some people may want to define records and implementations at runtime, although very unlikely, they will probably want a way to disable this feature\r\n\r\nAlthough Elixir doesn't ship with its own release tool yet, the available solutions would be rewriten to rely use this mechanism. By the time Elixir has its own release tool (planned for 0.9), we can integrate this behaviour as part of the release process."},{"closed_at",:null},{"user",[{"login","josevalim"},{"id",9582},{"avatar_url","https://secure.gravatar.com/avatar/e837f6b7fd146ab16ed3d663476c063e?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png"},{"gravatar_id","e837f6b7fd146ab16ed3d663476c063e"},{"url","https://api.github.com/users/josevalim"},{"html_url","https://github.com/josevalim"},{"followers_url","https://api.github.com/users/josevalim/followers"},{"following_url","https://api.github.com/users/josevalim/following{/other_user}"},{"gists_url","https://api.github.com/users/josevalim/gists{/gist_id}"},{"starred_url","https://api.github.com/users/josevalim/starred{/owner}{/repo}"},{"subscriptions_url","https://api.github.com/users/josevalim/subscriptions"},{"organizations_url","https://api.github.com/users/josevalim/orgs"},{"repos_url","https://api.github.com/users/josevalim/repos"},{"events_url","https://api.github.com/users/josevalim/events{/privacy}"},{"received_events_url","https://api.github.com/users/josevalim/received_events"},{"type","User"}]},{"milestone",:null},{"updated_at","2013-06-16T10:32:55Z"}]>,
                    #HashDict<[{"comments",26},{"number",1039},{"pull_request",[{"html_url",:null},{"diff_url",:null},{"patch_url",:null}]},{"created_at","2013-05-08T22:47:57Z"},{"state","open"},{"title","Add a range/step/seq function"},{"comments_url","https://api.github.com/repos/elixir-lang/elixir/issues/1039/comments"},{"id",14126218},{"labels",[[{"url","https://api.github.com/repos/elixir-lang/elixir/labels/Kind%3AFeature"},{"name","Kind:Feature"},{"color","0052cc"}],[{"url","https://api.github.com/repos/elixir-lang/elixir/labels/Note%3ADiscussion"},{"name","Note:Discussion"},{"color","bfdadc"}]]},{"url","https://api.github.com/repos/elixir-lang/elixir/issues/1039"},{"events_url","https://api.github.com/repos/elixir-lang/elixir/issues/1039/events"},{"html_url","https://github.com/elixir-lang/elixir/issues/1039"},{"labels_url","https://api.github.com/repos/elixir-lang/elixir/issues/1039/labels{/name}"},{"assignee",:null},{"body","Something akin to Python's `range` could make a nice addition to the language as a library or builtin function.\r\n\r\n```\r\n>>> range(0, 8, 2)\r\n[0, 2, 4, 6]\r\n>>> range(3, 5, -1)\r\n[]\r\n>>> range(-3, -5, -1)\r\n[-3, -4]\r\n```\r\n\r\nIt would produce an iterable, not a list.\r\n\r\nRelated discussion on the mailing list https://groups.google.com/forum/?fromgroups=#!topic/elixir-lang-core/HpBIV5zMAHw , continued in the issue #1017.\r\n\r\nBoth `step` and `seq` are OK names. Altough, as another alternative, we could rename current ranges to `intervals` (it makes just as much sense to talk about inclusiveness and non-inclusiveness of intervals, aka closed intervals and open intervals) and call the new function `range`."},{"closed_at",:null},{"user",[{"login","alco"},{"id",207748},{"avatar_url","https://secure.gravatar.com/avatar/96f31e49f44b5ba166999c4576c43c41?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png"},{"gravatar_id","96f31e49f44b5ba166999c4576c43c41"},{"url","https://api.github.com/users/alco"},{"html_url","https://github.com/alco"},{"followers_url","https://api.github.com/users/alco/followers"},{"following_url","https://api.github.com/users/alco/following{/other_user}"},{"gists_url","https://api.github.com/users/alco/gists{/gist_id}"},{"starred_url","https://api.github.com/users/alco/starred{/owner}{/repo}"},{"subscriptions_url","https://api.github.com/users/alco/subscriptions"},{"organizations_url","https://api.github.com/users/alco/orgs"},{"repos_url","https://api.github.com/users/alco/repos"},{"events_url","https://api.github.com/users/alco/events{/privacy}"},{"received_events_url","https://api.github.com/users/alco/received_events"},{"type","User"}]},{"milestone",:null},{"updated_at","2013-07-07T21:55:41Z"}]>,#HashDict<[{"comments",10},{"number",1050},{"pull_request",[{"html_url",:null},{"diff_url",:null},{"patch_url",:null}]},{"created_at","2013-05-12T23:43:18Z"},{"state","open"},{"title","Side effect of mix compile in `iex -S mix` session"},{"comments_url","https://api.github.com/repos/elixir-lang/elixir/issues/1050/comments"},{"id",14241667},{"labels",[[{"url","https://api.github.com/repos/elixir-lang/elixir/labels/Kind%3ABug"},{"name","Kind:Bug"},{"color","e10c02"}],[{"url","https://api.github.com/repos/elixir-lang/elixir/labels/Level%3AIntermediate"},{"name","Level:Intermediate"},{"color","fad8c7"}]]},{"url","https://api.github.com/repos/elixir-lang/elixir/issues/1050"},{"events_url","https://api.github.com/repos/elixir-lang/elixir/issues/1050/events"},{"html_url","https://github.com/elixir-lang/elixir/issues/1050"},{"labels_url","https://api.github.com/repos/elixir-lang/elixir/issues/1050/labels{/name}"},{"assignee",:null},{"body","When I run `iex -S mix`, if there is some work for mix to perform (e.g. compile the source), iex will receive an exit message upon launch.\r\n\r\n```\r\nλ mix clean\r\n\r\nλ iex -S mix\r\nErlang R15B03 (erts-5.9.3.1) [source] [64-bit] [smp:8:8] [async-threads:0] [hipe] [kernel-poll:false] [dtrace]\r\n\r\nCompiled lib/gochan.ex\r\nGenerated gochan.app\r\nInteractive Elixir (0.8.1) - press Ctrl+C to exit (type h() ENTER for help)\r\niex(1)> flush()\r\n{:EXIT,#PID<0.47.0>,:normal}\r\n:ok\r\n```\r\n\r\nRunning `iex -S mix` the second time starts a clean shell, because nothing needs to be compiled this time:\r\n\r\n```\r\nλ iex -S mix\r\nErlang R15B03 (erts-5.9.3.1) [source] [64-bit] [smp:8:8] [async-threads:0] [hipe] [kernel-poll:false] [dtrace]\r\n\r\nInteractive Elixir (0.8.1) - press Ctrl+C to exit (type h() ENTER for help)\r\niex(1)> flush()\r\n:ok\r\n```"},{"closed_at",:null},{"user",[{"login","alco"},{"id",207748},{"avatar_url","https://secure.gravatar.com/avatar/96f31e49f44b5ba166999c4576c43c41?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png"},{"gravatar_id","96f31e49f44b5ba166999c4576c43c41"},{"url","https://api.github.com/users/alco"},{"html_url","https://github.com/alco"},{"followers_url","https://api.github.com/users/alco/followers"},{"following_url","https://api.github.com/users/alco/following{/other_user}"},{"gists_url","https://api.github.com/users/alco/gists{/gist_id}"},{"starred_url","https://api.github.com/users/alco/starred{/owner}{/repo}"},{"subscriptions_url","https://api.github.com/users/alco/subscriptions"},{"organizations_url","https://api.github.com/users/alco/orgs"},{"repos_url","https://api.github.com/users/alco/repos"},{"events_url","https://api.github.com/users/alco/events{/privacy}"},{"received_events_url","https://api.github.com/users/alco/received_events"},{"type","User"}]},{"milestone",:null},{"updated_at","2013-06-18T09:13:32Z"}]>
                  ]

  test "formatted list of issues come out in a pretty table" do
    pretty_table = 
    """
       #  | created_at           | title
      ----+----------------------+-----------------------------------------
      889 | 2013-03-16T22:03:13Z | MIX_PATH environment variable (of sorts)
      892 | 2013-03-20T19:22:07Z | Enhanced mix test --cover
      893 | 2013-03-21T06:23:00Z | mix test time reports
      898 | 2013-03-23T19:19:08Z | Add mix compile --warnings-as-errors
    """
    assert format(@list_of_issues) == pretty_table
  end

    test "format outputs a string with issue #, created_at and title" do  
      short_title = Enum.take(String.codepoints(@issue["title"]), 51)
            |> Enum.join
    correct_line = "#{@issue["number"]} | #{@issue["created_at"]} | #{short_title}"
    assert format([@issue]) == [correct_line]
  end

  test "length of formatted line is <= max column width" do
    [string_result] = format([@issue]) 
    assert String.length(string_result) == 80
  end
end
